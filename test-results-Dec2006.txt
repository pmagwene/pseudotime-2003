# testing the code with Python 2.4 and Numeric 24.2 (Dec 2006)

C:\Documents and Settings\pmagwene\Desktop\pathrecon\pathrecon>python
Python 2.4.3 - Enthought Edition 1.0.0 (#69, Aug  2 2006, 12:09:59) [MSC v.1310
32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import sys
>>> sys.path = ['.'] + sys.path # this just makes sure the local directory is first in the path
>>> import pathrecon, io, graph
>>> import Numeric as Num
>>> jelly = io.tablasrows("jellyroll.txt", autoconvert=T)
>>> jelly = io.tableasrows("jellyroll.txt", autoconvert=True)
>>> jelly = Num.array(jelly)
>>> jelly.shape
(120, 2)
>>> mst, diampath, diampathlen = pathrecon.mst_and_diameterpath(jelly)
>>> print diampath
[79, 39, 119, 78, 118, 77, 37, 117, 36, 116, 75, 35, 115, 74, 114, 34, 73, 72,
12, 32, 111, 71, 70, 110, 29, 109, 28, 69, 108, 27, 67, 26, 106, 65, 25, 24, 23
 103, 63, 62, 22, 102, 21, 61, 20, 60, 99, 59, 98, 58, 17, 97, 96, 16, 15, 55,
5, 94, 54, 93, 53, 52, 92, 51, 11, 91, 90, 50, 10, 49, 89, 9, 88, 47, 48, 87, 7
 46, 86, 6, 5, 84, 83, 3, 43, 42, 82, 1, 0, 40, 80]
>>> diampathlen
95.076581360819802
>>> Num.__version__
'24.2'
>>> alpha = io.tableasrows('alpha.txt', autoconvert=True, hasrownames=True)
>>> alpha = Num.transpose(Num.array(alpha))
>>> mst, diampath, diampathlen = pathrecon.mst_and_diameterpath(alpha)
>>> print diampath
[0, 1, 2, 3, 4, 5, 6, 7, 16, 15, 13, 12, 11, 10]
>>> graph.edges(mst)
Set([(0, 1), (1, 2), (13, 15), (6, 7), (5, 6), (7, 8), (12, 13), (11, 12), (15,
16), (14, 15), (4, 5), (2, 3), (9, 17), (7, 16), (10, 11), (3, 4), (16, 17)])
>>> pqtree = pathrecon.make_pqtree(mst)
>>> pqtree
([(7,), (8,), (0, 1, 2, 3, 4, 5, 6)], [(16,), (17, 9)], [(15,), (10, 11, 12, 13
, (14,)])
>>> pqperm = pathrecon.pqtree_perms(pqtree)
>>> rpaths = pathrecon.rank_paths(pqperm, dist)
>>> for i in range(10):
...   print i, rpaths.paths[i], rpaths.lengths[i]
...
0 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 17, 16, 15, 14, 13, 12, 11, 10] 208.058844676
1 [0, 1, 2, 3, 4, 5, 6, 7, 8, 16, 17, 9, 10, 11, 12, 13, 15, 14] 209.508319108
2 [0, 1, 2, 3, 4, 5, 6, 7, 8, 16, 17, 9, 10, 11, 12, 13, 14, 15] 209.592225526
3 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 17, 16, 14, 15, 13, 12, 11, 10] 209.803703466
4 [0, 1, 2, 3, 4, 5, 6, 7, 8, 17, 9, 16, 15, 14, 13, 12, 11, 10] 210.330224454
5 [0, 1, 2, 3, 4, 5, 6, 7, 8, 16, 17, 9, 15, 14, 13, 12, 11, 10] 210.927895415
6 [0, 1, 2, 3, 4, 5, 6, 7, 8, 16, 9, 17, 15, 14, 13, 12, 11, 10] 210.931985601
7 [0, 1, 2, 3, 4, 5, 6, 8, 7, 16, 17, 9, 10, 11, 12, 13, 15, 14] 211.046266626
8 [0, 1, 2, 3, 4, 5, 6, 8, 7, 16, 17, 9, 10, 11, 12, 13, 14, 15] 211.130173044
9 [0, 1, 2, 3, 4, 5, 6, 8, 7, 9, 17, 16, 15, 14, 13, 12, 11, 10] 211.820448187
>>>
